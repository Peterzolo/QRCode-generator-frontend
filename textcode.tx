// import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
// import axios from "axios";

// import Post from "../../models/postModel";

// export const getPosts = createAsyncThunk(
//   "posts/getPosts",
//   async (data, thunkApi) => {
//     try {
//       const response = await axios.get<Post[]>(
//         "https://jsonplaceholder.typicode.com/posts?_limit=10"
//       );
//       return response.data;
//     } catch (error: any) {
//       const message = error.message;
//       return thunkApi.rejectWithValue(message);
//     }
//   }
// );

// interface PostState {
//   loading: boolean;
//   error: string | null;
//   data: Post[] | null;
// }

// const initialState = {
//   loading: false,
//   error: null,
//   data: null,
// } as PostState;

// const postSlice = createSlice({
//   name: "post",
//   initialState,
//   reducers: {},
//   extraReducers(builder) {
//     builder
//       .addCase(getPosts.pending, (state, action) => {
//         state.loading = true;
//       })
//       .addCase(getPosts.fulfilled, (state, action: PayloadAction<Post[]>) => {
//         state.loading = false;
//         state.data = action.payload;
//       })
//       .addCase(getPosts.rejected, (state, action: PayloadAction<any>) => {
//         state.error = action.payload;
//       });
//   },
// });

// export default postSlice.reducer;

// import { configureStore } from "@reduxjs/toolkit";

// import postSlice from "./posts/postSlice";

// const store = configureStore({
//   reducer: postSlice,
// });

// export type RootState = ReturnType<typeof store.getState>;

// export type AppDispatch = typeof store.dispatch;

// export default store;

// Hook: import { useDispatch, useSelector } from "react-redux";
// import type { TypedUseSelectorHook } from "react-redux";
// import type { RootState, AppDispatch } from "../features/store";

// export const useAppDispatch: () => AppDispatch = useDispatch;
// export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
